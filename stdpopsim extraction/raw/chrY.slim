/*
 * stdpopsim 0.3.0
 *
 * Demographic model: OutOfAfrica_2T12
 * Two population out-of-Africa
 * Tennessen et al., 2012: https://doi.org/10.1126/science.1219240
 * Fu et al., 2013: https://doi.org/10.1038/nature11690
 */

initialize() {
    if (!exists("dry_run"))
        defineConstant("dry_run", F);
    if (!exists("verbosity"))
        defineConstant("verbosity", 2);

    // Scaling factor to speed up simulation.
    // See SLiM manual:
    // `5.5 Rescaling population sizes to improve simulation performance`.
    defineConstant("Q", 1);

    defineConstant("burn_in", 10.0);
    defineConstant("generation_time", 25);
    defineConstant("trees_file", "/var/folders/js/tdccty6x1mn8_58ygf7v1d440000gn/T/stdpopsim_o9pufnuj/c72edb.trees");
    defineConstant("pop_names", c("AFR", "EUR"));

    _recombination_rates = c(
        0.0);
    if (Q != 1) {
        _recombination_rates = (1-(1-2*_recombination_rates)^Q)/2;
    }
    _recombination_ends = c(
        57227414);
    defineConstant("recombination_rates", _recombination_rates);
    defineConstant("recombination_ends", _recombination_ends);
    // whatever is in this dictionary will be saved out in the .trees file
    defineConstant("metadata", Dictionary("Q", Q));

    initializeMutationType(0, 0.5, "f", Q * 0);
    initializeGenomicElementType(0, c(0), c(1.0));
    // Note: genomic element type 0 is entirely neutral, so will not be simulated by SLiM.
    initializeGenomicElement(0, c(
        0, 2787603, 2841627, 2842242, 2844257, 2845743, 2854771, 2865245,
        2866894, 2953997, 2961646, 2975244, 2975654, 2976822, 2978080, 2979993,
        3579802, 5032728, 5057459, 5100707, 5104361, 6246754, 6247433, 6247673,
        6247920, 6248078, 7025142, 7043125, 7064149, 7070328, 7070861, 7071623,
        7071830, 7074620, 7080853, 7085972, 7086417, 7087432, 7090190, 7091492,
        9338013, 9338698, 9338938, 9339185, 9339343, 9358328, 9359013, 9359253,
        9359500, 9359658, 9398952, 9399637, 9399877, 9400124, 9400282, 9487816,
        9488501, 9488741, 9488988, 9489176, 9489893, 9528411, 9529096, 9529336,
        9529583, 9529741, 12709543, 12720737, 12722187, 12725225, 12726793,
        12735727, 12736249, 12736549, 12738309, 12739629, 12757398, 12758642,
        12760617, 12771155, 12773925, 12775566, 12776860, 12778259, 12778755,
        12779646, 12786333, 12786800, 12790532, 12791624, 12793201, 12810287,
        12810818, 12811781, 12813052, 12816344, 12818610, 12833861, 12838052,
        12840614, 12841133, 12842465, 12843193, 12846518, 12847153, 12847327,
        12856496, 12856845, 12857661, 12859416, 12904981, 12907594, 12909407,
        12911968, 12912882, 12913062, 12913853, 12914649, 12914982, 12915227,
        12915774, 12916027, 12916442, 12916634, 12917060, 12917542, 12918122,
        13249882, 13251187, 13260404, 13297848, 13299144, 13302991, 13305547,
        13306112, 13306250, 13323760, 13324706, 13326350, 13336335, 13354833,
        13355398, 13356018, 13357969, 13358619, 13359222, 13359986, 13360528,
        13366393, 13369349, 13393893, 13396972, 13411113, 13414793, 13449066,
        13470229, 13479317, 13479665, 13704435, 13705259, 13986146, 13986440,
        14056391, 14056859, 14622591, 14719518, 14723269, 14733537, 14824373,
        14830519, 14841262, 18547300, 18548471, 18588634, 18731867, 18772627,
        18773618, 19706345, 19706640, 19706863, 19707746, 19708071, 19708423,
        19709013, 19709809, 19710472, 19715499, 19715739, 19716004, 19716473,
        19716715, 19721034, 19721311, 19731930, 19732165, 19732742, 19735497,
        19735750, 19739662, 19741488, 19741857, 19743239, 19744534, 20575887,
        20579691, 20582693, 20584524, 20588105, 20589575, 20592346, 20756166,
        20756855, 20760048, 20761381, 20768976, 20779666, 20781032, 21513459,
        21514037, 21517234, 21519302, 21521427, 21522493, 21523045, 21523590,
        21524622, 21524798, 21525508, 21537000, 21537578, 21540775, 21542843,
        21544968, 21546034, 21546586, 21547131, 21548163, 21548338, 21549048,
        21880652, 21881152, 21881350, 21882382, 21882927, 21883479, 21884549,
        21886712, 21888805, 21891928, 21892513, 21904194, 21904694, 21904891,
        21905923, 21906468, 21907020, 21908090, 21910253, 21912346, 21915469,
        21916054, 22072581, 22082195, 22084839, 22169118, 22169618, 22169815,
        22170849, 22171394, 22171945, 22173015, 22175178, 22177271, 22180394,
        22180969, 22405556, 22406128, 22409329, 22411397, 22413522, 22414588,
        22415139, 22415684, 22416718, 22416893, 22417603, 22501633, 22504324,
        22514070, 23219743, 23226490, 23226856, 23227468, 23227968, 23228197,
        23229669, 23232112, 23234503, 23241677, 23244061, 23246457, 23248834,
        23255989, 23265778, 23268162, 23270547, 23272931, 23275315, 23277699,
        23280084, 23280863, 23285501, 23682265, 23691872, 23694527, 24045676,
        24047688, 24768997, 24773604, 24774421, 24784208, 24786585, 24788965,
        24791342, 24793721, 24796098, 24798494, 24800884, 24803327, 24804867,
        24805020, 24805508, 24806160, 24806581, 24813185, 24834129, 24840877,
        24841243, 24841855, 24842355, 24842584, 24854904, 24857347, 24859737,
        24862133, 24864517, 24866913, 24869290, 24871670, 24874047, 24883835,
        24886220, 24888605, 24890989, 24893374, 24895759, 24896539, 24901175,
        25624034, 25624527), c(
        2786987, 2841623, 2842163, 2844075, 2845644, 2854598, 2865086, 2866791,
        2953935, 2961072, 2975093, 2975509, 2976668, 2977938, 2978808, 3579243,
        5032695, 5056822, 5098213, 5104342, 6246267, 6247354, 6247560, 6247773,
        6248014, 7025083, 7042978, 7063895, 7070194, 7070718, 7071558, 7071731,
        7074558, 7080730, 7085896, 7086288, 7087265, 7090087, 7091470, 9337508,
        9338619, 9338825, 9339038, 9339279, 9357841, 9358934, 9359140, 9359353,
        9359594, 9398465, 9399558, 9399764, 9399977, 9400218, 9487311, 9488422,
        9488628, 9488841, 9489093, 9489869, 9527924, 9529017, 9529223, 9529436,
        9529677, 12709446, 12720587, 12722106, 12725111, 12726573, 12735610,
        12735996, 12736409, 12738155, 12739523, 12757190, 12758504, 12760482,
        12771066, 12773581, 12775469, 12776647, 12778017, 12778604, 12779524,
        12786201, 12786520, 12790405, 12791497, 12793030, 12810177, 12810670,
        12811633, 12812828, 12816122, 12818418, 12833686, 12837909, 12839862,
        12841008, 12842238, 12843062, 12846331, 12846931, 12847237, 12856338,
        12856631, 12857564, 12859277, 12904935, 12907535, 12909358, 12911837,
        12912725, 12912961, 12913716, 12914562, 12914882, 12915065, 12915628,
        12915881, 12916259, 12916515, 12916905, 12917401, 12918041, 13249854,
        13251015, 13260276, 13297705, 13298955, 13302875, 13305397, 13306036,
        13306184, 13323553, 13324599, 13326219, 13335561, 13354784, 13355001,
        13355921, 13357875, 13358462, 13359086, 13359765, 13360428, 13366265,
        13369254, 13393857, 13396916, 13410991, 13414733, 13449015, 13470119,
        13479252, 13479512, 13704334, 13705223, 13985869, 13986337, 14056288,
        14056582, 14622118, 14719457, 14723115, 14733450, 14824186, 14829728,
        14840411, 18546786, 18547777, 18588534, 18731767, 18771933, 18773104,
        19705993, 19706439, 19706792, 19707145, 19707932, 19708242, 19708873,
        19709449, 19710374, 19715350, 19715613, 19715821, 19716277, 19716594,
        19720870, 19721128, 19731770, 19732044, 19732582, 19735350, 19735619,
        19739526, 19741316, 19741733, 19743160, 19744383, 20575870, 20579606,
        20582588, 20584472, 20588022, 20589482, 20592339, 20756162, 20756776,
        20759866, 20761282, 20768803, 20779507, 20780929, 21513349, 21513932,
        21517055, 21519148, 21521311, 21522381, 21522933, 21523478, 21524510,
        21524708, 21525208, 21536890, 21537473, 21540596, 21542689, 21544852,
        21545922, 21546474, 21547019, 21548051, 21548248, 21548748, 21880352,
        21881062, 21881238, 21882270, 21882815, 21883367, 21884433, 21886558,
        21888626, 21891823, 21892403, 21903894, 21904604, 21904779, 21905811,
        21906356, 21906908, 21907974, 21910099, 21912167, 21915364, 21915944,
        22072321, 22082078, 22084769, 22168818, 22169528, 22169703, 22170737,
        22171282, 22171833, 22172899, 22175024, 22177092, 22180289, 22180859,
        22405446, 22406023, 22409150, 22411243, 22413406, 22414476, 22415027,
        22415572, 22416606, 22416803, 22417303, 22501563, 22504207, 22513810,
        23219739, 23226342, 23226763, 23227415, 23227903, 23228056, 23229596,
        23232039, 23234430, 23241604, 23243988, 23246384, 23248761, 23255916,
        23265705, 23268089, 23270474, 23272858, 23275242, 23277626, 23280011,
        23280827, 23285436, 23682005, 23691755, 23694457, 24045602, 24046095,
        24768932, 24773568, 24774348, 24784135, 24786512, 24788892, 24791269,
        24793648, 24796025, 24798421, 24800811, 24803254, 24804726, 24804955,
        24805455, 24806067, 24806433, 24813181, 24834125, 24840729, 24841150,
        24841802, 24842290, 24842443, 24854831, 24857274, 24859664, 24862060,
        24864444, 24866840, 24869217, 24871597, 24873974, 24883762, 24886147,
        24888532, 24890916, 24893301, 24895686, 24896503, 24901110, 25622441,
        25624453, 57227414));
    initializeMutationType(1, 0.5, "f", Q * 0);
    initializeMutationType(2, 0.5, "g", Q * -0.03, 0.16);
    initializeMutationType(3, 0.5, "e", Q * 0.01);
    initializeGenomicElementType(1, c(1, 2, 3), c(0.0, 4.9999999999999996e-05, 0.6));
    initializeGenomicElement(1, c(
        2786988, 2841624, 2842164, 2844076, 2845645, 2854599, 2865087, 2866792,
        2953936, 2961073, 2975094, 2975510, 2976669, 2977939, 2978809, 3579244,
        5032696, 5056823, 5098214, 5104343, 6246268, 6247355, 6247561, 6247774,
        6248015, 7025084, 7042979, 7063896, 7070195, 7070719, 7071559, 7071732,
        7074559, 7080731, 7085897, 7086289, 7087266, 7090088, 7091471, 9337509,
        9338620, 9338826, 9339039, 9339280, 9357842, 9358935, 9359141, 9359354,
        9359595, 9398466, 9399559, 9399765, 9399978, 9400219, 9487312, 9488423,
        9488629, 9488842, 9489094, 9489870, 9527925, 9529018, 9529224, 9529437,
        9529678, 12709447, 12720588, 12722107, 12725112, 12726574, 12735611,
        12735997, 12736410, 12738156, 12739524, 12757191, 12758505, 12760483,
        12771067, 12773582, 12775470, 12776648, 12778018, 12778605, 12779525,
        12786202, 12786521, 12790406, 12791498, 12793031, 12810178, 12810671,
        12811634, 12812829, 12816123, 12818419, 12833687, 12837910, 12839863,
        12841009, 12842239, 12843063, 12846332, 12846932, 12847238, 12856339,
        12856632, 12857565, 12859278, 12904936, 12907536, 12909359, 12911838,
        12912726, 12912962, 12913717, 12914563, 12914883, 12915066, 12915629,
        12915882, 12916260, 12916516, 12916906, 12917402, 12918042, 13249855,
        13251016, 13260277, 13297706, 13298956, 13302876, 13305398, 13306037,
        13306185, 13323554, 13324600, 13326220, 13335562, 13354785, 13355002,
        13355922, 13357876, 13358463, 13359087, 13359766, 13360429, 13366266,
        13369255, 13393858, 13396917, 13410992, 13414734, 13449016, 13470120,
        13479253, 13479513, 13704335, 13705224, 13985870, 13986338, 14056289,
        14056583, 14622119, 14719458, 14723116, 14733451, 14824187, 14829729,
        14840412, 18546787, 18547778, 18588535, 18731768, 18771934, 18773105,
        19705994, 19706440, 19706793, 19707146, 19707933, 19708243, 19708874,
        19709450, 19710375, 19715351, 19715614, 19715822, 19716278, 19716595,
        19720871, 19721129, 19731771, 19732045, 19732583, 19735351, 19735620,
        19739527, 19741317, 19741734, 19743161, 19744384, 20575871, 20579607,
        20582589, 20584473, 20588023, 20589483, 20592340, 20756163, 20756777,
        20759867, 20761283, 20768804, 20779508, 20780930, 21513350, 21513933,
        21517056, 21519149, 21521312, 21522382, 21522934, 21523479, 21524511,
        21524709, 21525209, 21536891, 21537474, 21540597, 21542690, 21544853,
        21545923, 21546475, 21547020, 21548052, 21548249, 21548749, 21880353,
        21881063, 21881239, 21882271, 21882816, 21883368, 21884434, 21886559,
        21888627, 21891824, 21892404, 21903895, 21904605, 21904780, 21905812,
        21906357, 21906909, 21907975, 21910100, 21912168, 21915365, 21915945,
        22072322, 22082079, 22084770, 22168819, 22169529, 22169704, 22170738,
        22171283, 22171834, 22172900, 22175025, 22177093, 22180290, 22180860,
        22405447, 22406024, 22409151, 22411244, 22413407, 22414477, 22415028,
        22415573, 22416607, 22416804, 22417304, 22501564, 22504208, 22513811,
        23219740, 23226343, 23226764, 23227416, 23227904, 23228057, 23229597,
        23232040, 23234431, 23241605, 23243989, 23246385, 23248762, 23255917,
        23265706, 23268090, 23270475, 23272859, 23275243, 23277627, 23280012,
        23280828, 23285437, 23682006, 23691756, 23694458, 24045603, 24046096,
        24768933, 24773569, 24774349, 24784136, 24786513, 24788893, 24791270,
        24793649, 24796026, 24798422, 24800812, 24803255, 24804727, 24804956,
        24805456, 24806068, 24806434, 24813182, 24834126, 24840730, 24841151,
        24841803, 24842291, 24842444, 24854832, 24857275, 24859665, 24862061,
        24864445, 24866841, 24869218, 24871598, 24873975, 24883763, 24886148,
        24888533, 24890917, 24893302, 24895687, 24896504, 24901111, 25622442,
        25624454), c(
        2787602, 2841626, 2842241, 2844256, 2845742, 2854770, 2865244, 2866893,
        2953996, 2961645, 2975243, 2975653, 2976821, 2978079, 2979992, 3579801,
        5032727, 5057458, 5100706, 5104360, 6246753, 6247432, 6247672, 6247919,
        6248077, 7025141, 7043124, 7064148, 7070327, 7070860, 7071622, 7071829,
        7074619, 7080852, 7085971, 7086416, 7087431, 7090189, 7091491, 9338012,
        9338697, 9338937, 9339184, 9339342, 9358327, 9359012, 9359252, 9359499,
        9359657, 9398951, 9399636, 9399876, 9400123, 9400281, 9487815, 9488500,
        9488740, 9488987, 9489175, 9489892, 9528410, 9529095, 9529335, 9529582,
        9529740, 12709542, 12720736, 12722186, 12725224, 12726792, 12735726,
        12736248, 12736548, 12738308, 12739628, 12757397, 12758641, 12760616,
        12771154, 12773924, 12775565, 12776859, 12778258, 12778754, 12779645,
        12786332, 12786799, 12790531, 12791623, 12793200, 12810286, 12810817,
        12811780, 12813051, 12816343, 12818609, 12833860, 12838051, 12840613,
        12841132, 12842464, 12843192, 12846517, 12847152, 12847326, 12856495,
        12856844, 12857660, 12859415, 12904980, 12907593, 12909406, 12911967,
        12912881, 12913061, 12913852, 12914648, 12914981, 12915226, 12915773,
        12916026, 12916441, 12916633, 12917059, 12917541, 12918121, 13249881,
        13251186, 13260403, 13297847, 13299143, 13302990, 13305546, 13306111,
        13306249, 13323759, 13324705, 13326349, 13336334, 13354832, 13355397,
        13356017, 13357968, 13358618, 13359221, 13359985, 13360527, 13366392,
        13369348, 13393892, 13396971, 13411112, 13414792, 13449065, 13470228,
        13479316, 13479664, 13704434, 13705258, 13986145, 13986439, 14056390,
        14056858, 14622590, 14719517, 14723268, 14733536, 14824372, 14830518,
        14841261, 18547299, 18548470, 18588633, 18731866, 18772626, 18773617,
        19706344, 19706639, 19706862, 19707745, 19708070, 19708422, 19709012,
        19709808, 19710471, 19715498, 19715738, 19716003, 19716472, 19716714,
        19721033, 19721310, 19731929, 19732164, 19732741, 19735496, 19735749,
        19739661, 19741487, 19741856, 19743238, 19744533, 20575886, 20579690,
        20582692, 20584523, 20588104, 20589574, 20592345, 20756165, 20756854,
        20760047, 20761380, 20768975, 20779665, 20781031, 21513458, 21514036,
        21517233, 21519301, 21521426, 21522492, 21523044, 21523589, 21524621,
        21524797, 21525507, 21536999, 21537577, 21540774, 21542842, 21544967,
        21546033, 21546585, 21547130, 21548162, 21548337, 21549047, 21880651,
        21881151, 21881349, 21882381, 21882926, 21883478, 21884548, 21886711,
        21888804, 21891927, 21892512, 21904193, 21904693, 21904890, 21905922,
        21906467, 21907019, 21908089, 21910252, 21912345, 21915468, 21916053,
        22072580, 22082194, 22084838, 22169117, 22169617, 22169814, 22170848,
        22171393, 22171944, 22173014, 22175177, 22177270, 22180393, 22180968,
        22405555, 22406127, 22409328, 22411396, 22413521, 22414587, 22415138,
        22415683, 22416717, 22416892, 22417602, 22501632, 22504323, 22514069,
        23219742, 23226489, 23226855, 23227467, 23227967, 23228196, 23229668,
        23232111, 23234502, 23241676, 23244060, 23246456, 23248833, 23255988,
        23265777, 23268161, 23270546, 23272930, 23275314, 23277698, 23280083,
        23280862, 23285500, 23682264, 23691871, 23694526, 24045675, 24047687,
        24768996, 24773603, 24774420, 24784207, 24786584, 24788964, 24791341,
        24793720, 24796097, 24798493, 24800883, 24803326, 24804866, 24805019,
        24805507, 24806159, 24806580, 24813184, 24834128, 24840876, 24841242,
        24841854, 24842354, 24842583, 24854903, 24857346, 24859736, 24862132,
        24864516, 24866912, 24869289, 24871669, 24874046, 24883834, 24886219,
        24888604, 24890988, 24893373, 24895758, 24896538, 24901174, 25624033,
        25624526));
    initializeMutationRate(Q*c(
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0,
        1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0, 1.416118e-08,
        0.0, 1.416118e-08, 0.0, 1.416118e-08, 0.0), c(
        2786987, 2787602, 2841623, 2841626, 2842163, 2842241, 2844075, 2844256,
        2845644, 2845742, 2854598, 2854770, 2865086, 2865244, 2866791, 2866893,
        2953935, 2953996, 2961072, 2961645, 2975093, 2975243, 2975509, 2975653,
        2976668, 2976821, 2977938, 2978079, 2978808, 2979992, 3579243, 3579801,
        5032695, 5032727, 5056822, 5057458, 5098213, 5100706, 5104342, 5104360,
        6246267, 6246753, 6247354, 6247432, 6247560, 6247672, 6247773, 6247919,
        6248014, 6248077, 7025083, 7025141, 7042978, 7043124, 7063895, 7064148,
        7070194, 7070327, 7070718, 7070860, 7071558, 7071622, 7071731, 7071829,
        7074558, 7074619, 7080730, 7080852, 7085896, 7085971, 7086288, 7086416,
        7087265, 7087431, 7090087, 7090189, 7091470, 7091491, 9337508, 9338012,
        9338619, 9338697, 9338825, 9338937, 9339038, 9339184, 9339279, 9339342,
        9357841, 9358327, 9358934, 9359012, 9359140, 9359252, 9359353, 9359499,
        9359594, 9359657, 9398465, 9398951, 9399558, 9399636, 9399764, 9399876,
        9399977, 9400123, 9400218, 9400281, 9487311, 9487815, 9488422, 9488500,
        9488628, 9488740, 9488841, 9488987, 9489093, 9489175, 9489869, 9489892,
        9527924, 9528410, 9529017, 9529095, 9529223, 9529335, 9529436, 9529582,
        9529677, 9529740, 12709446, 12709542, 12720587, 12720736, 12722106,
        12722186, 12725111, 12725224, 12726573, 12726792, 12735610, 12735726,
        12735996, 12736248, 12736409, 12736548, 12738155, 12738308, 12739523,
        12739628, 12757190, 12757397, 12758504, 12758641, 12760482, 12760616,
        12771066, 12771154, 12773581, 12773924, 12775469, 12775565, 12776647,
        12776859, 12778017, 12778258, 12778604, 12778754, 12779524, 12779645,
        12786201, 12786332, 12786520, 12786799, 12790405, 12790531, 12791497,
        12791623, 12793030, 12793200, 12810177, 12810286, 12810670, 12810817,
        12811633, 12811780, 12812828, 12813051, 12816122, 12816343, 12818418,
        12818609, 12833686, 12833860, 12837909, 12838051, 12839862, 12840613,
        12841008, 12841132, 12842238, 12842464, 12843062, 12843192, 12846331,
        12846517, 12846931, 12847152, 12847237, 12847326, 12856338, 12856495,
        12856631, 12856844, 12857564, 12857660, 12859277, 12859415, 12904935,
        12904980, 12907535, 12907593, 12909358, 12909406, 12911837, 12911967,
        12912725, 12912881, 12912961, 12913061, 12913716, 12913852, 12914562,
        12914648, 12914882, 12914981, 12915065, 12915226, 12915628, 12915773,
        12915881, 12916026, 12916259, 12916441, 12916515, 12916633, 12916905,
        12917059, 12917401, 12917541, 12918041, 12918121, 13249854, 13249881,
        13251015, 13251186, 13260276, 13260403, 13297705, 13297847, 13298955,
        13299143, 13302875, 13302990, 13305397, 13305546, 13306036, 13306111,
        13306184, 13306249, 13323553, 13323759, 13324599, 13324705, 13326219,
        13326349, 13335561, 13336334, 13354784, 13354832, 13355001, 13355397,
        13355921, 13356017, 13357875, 13357968, 13358462, 13358618, 13359086,
        13359221, 13359765, 13359985, 13360428, 13360527, 13366265, 13366392,
        13369254, 13369348, 13393857, 13393892, 13396916, 13396971, 13410991,
        13411112, 13414733, 13414792, 13449015, 13449065, 13470119, 13470228,
        13479252, 13479316, 13479512, 13479664, 13704334, 13704434, 13705223,
        13705258, 13985869, 13986145, 13986337, 13986439, 14056288, 14056390,
        14056582, 14056858, 14622118, 14622590, 14719457, 14719517, 14723115,
        14723268, 14733450, 14733536, 14824186, 14824372, 14829728, 14830518,
        14840411, 14841261, 18546786, 18547299, 18547777, 18548470, 18588534,
        18588633, 18731767, 18731866, 18771933, 18772626, 18773104, 18773617,
        19705993, 19706344, 19706439, 19706639, 19706792, 19706862, 19707145,
        19707745, 19707932, 19708070, 19708242, 19708422, 19708873, 19709012,
        19709449, 19709808, 19710374, 19710471, 19715350, 19715498, 19715613,
        19715738, 19715821, 19716003, 19716277, 19716472, 19716594, 19716714,
        19720870, 19721033, 19721128, 19721310, 19731770, 19731929, 19732044,
        19732164, 19732582, 19732741, 19735350, 19735496, 19735619, 19735749,
        19739526, 19739661, 19741316, 19741487, 19741733, 19741856, 19743160,
        19743238, 19744383, 19744533, 20575870, 20575886, 20579606, 20579690,
        20582588, 20582692, 20584472, 20584523, 20588022, 20588104, 20589482,
        20589574, 20592339, 20592345, 20756162, 20756165, 20756776, 20756854,
        20759866, 20760047, 20761282, 20761380, 20768803, 20768975, 20779507,
        20779665, 20780929, 20781031, 21513349, 21513458, 21513932, 21514036,
        21517055, 21517233, 21519148, 21519301, 21521311, 21521426, 21522381,
        21522492, 21522933, 21523044, 21523478, 21523589, 21524510, 21524621,
        21524708, 21524797, 21525208, 21525507, 21536890, 21536999, 21537473,
        21537577, 21540596, 21540774, 21542689, 21542842, 21544852, 21544967,
        21545922, 21546033, 21546474, 21546585, 21547019, 21547130, 21548051,
        21548162, 21548248, 21548337, 21548748, 21549047, 21880352, 21880651,
        21881062, 21881151, 21881238, 21881349, 21882270, 21882381, 21882815,
        21882926, 21883367, 21883478, 21884433, 21884548, 21886558, 21886711,
        21888626, 21888804, 21891823, 21891927, 21892403, 21892512, 21903894,
        21904193, 21904604, 21904693, 21904779, 21904890, 21905811, 21905922,
        21906356, 21906467, 21906908, 21907019, 21907974, 21908089, 21910099,
        21910252, 21912167, 21912345, 21915364, 21915468, 21915944, 21916053,
        22072321, 22072580, 22082078, 22082194, 22084769, 22084838, 22168818,
        22169117, 22169528, 22169617, 22169703, 22169814, 22170737, 22170848,
        22171282, 22171393, 22171833, 22171944, 22172899, 22173014, 22175024,
        22175177, 22177092, 22177270, 22180289, 22180393, 22180859, 22180968,
        22405446, 22405555, 22406023, 22406127, 22409150, 22409328, 22411243,
        22411396, 22413406, 22413521, 22414476, 22414587, 22415027, 22415138,
        22415572, 22415683, 22416606, 22416717, 22416803, 22416892, 22417303,
        22417602, 22501563, 22501632, 22504207, 22504323, 22513810, 22514069,
        23219739, 23219742, 23226342, 23226489, 23226763, 23226855, 23227415,
        23227467, 23227903, 23227967, 23228056, 23228196, 23229596, 23229668,
        23232039, 23232111, 23234430, 23234502, 23241604, 23241676, 23243988,
        23244060, 23246384, 23246456, 23248761, 23248833, 23255916, 23255988,
        23265705, 23265777, 23268089, 23268161, 23270474, 23270546, 23272858,
        23272930, 23275242, 23275314, 23277626, 23277698, 23280011, 23280083,
        23280827, 23280862, 23285436, 23285500, 23682005, 23682264, 23691755,
        23691871, 23694457, 23694526, 24045602, 24045675, 24046095, 24047687,
        24768932, 24768996, 24773568, 24773603, 24774348, 24774420, 24784135,
        24784207, 24786512, 24786584, 24788892, 24788964, 24791269, 24791341,
        24793648, 24793720, 24796025, 24796097, 24798421, 24798493, 24800811,
        24800883, 24803254, 24803326, 24804726, 24804866, 24804955, 24805019,
        24805455, 24805507, 24806067, 24806159, 24806433, 24806580, 24813181,
        24813184, 24834125, 24834128, 24840729, 24840876, 24841150, 24841242,
        24841802, 24841854, 24842290, 24842354, 24842443, 24842583, 24854831,
        24854903, 24857274, 24857346, 24859664, 24859736, 24862060, 24862132,
        24864444, 24864516, 24866840, 24866912, 24869217, 24869289, 24871597,
        24871669, 24873974, 24874046, 24883762, 24883834, 24886147, 24886219,
        24888532, 24888604, 24890916, 24890988, 24893301, 24893373, 24895686,
        24895758, 24896503, 24896538, 24901110, 24901174, 25622441, 25624033,
        25624453, 25624526, 57227414));

    // Time of epoch boundaries, in years before present.
    // The first epoch spans from INF to _T[0].
    defineConstant("_T", c(148000, 51000, 23000, 5115, 0));

    // Population sizes at the beginning of each epoch
    // (will be rounded).
    _N = array(c(
        // INF:_T[0], _T[0]:_T[1], etc.
        c(3655.0, 7237.0, 7237.0, 7237.0, 7237.0), // AFR
        c(0.0, 0.0, 930.5, 516.0, 4639.606174726384) // EUR
    ), c(5, 2));

    defineConstant("num_epochs", length(_T));
    defineConstant("num_populations", ncol(_N));

    // Population growth rates for each epoch.
    defineConstant("growth_rates", array(c(
        // INF:_T[0], _T[0]:_T[1], etc.
        c(0.0, 0.0, 0.0, 0.0, 0.0166), // AFR
        c(0.0, 0.0, 0.0, 0.00307, 0.0195) // EUR
    ), c(num_epochs, num_populations)));

    no_migration = rep(0, num_populations*num_populations);

    // Migration rates for each epoch.
    // Migrations involving a population with size=0 are ignored.
    // XXX: document what the rows & cols correspond to.
    defineConstant("migration_matrices", array(c(

        // INF:_T[0]
        no_migration,

        // _T[1]:_T[2]
        no_migration,

        // _T[2]:_T[3]
        array(c(
            c(0, 0.00015),
            c(0.00015, 0)
        ), c(num_populations, num_populations)),

        // _T[3]:_T[4]
        array(c(
            c(0, 2.5e-05),
            c(2.5e-05, 0)
        ), c(num_populations, num_populations)),

        // _T[4]:_T[5]
        array(c(
            c(0, 2.5e-05),
            c(2.5e-05, 0)
        ), c(num_populations, num_populations))

    ), c(num_populations, num_populations, num_epochs)));

    // Population splits, one row for each event.
    defineConstant("subpopulation_splits", array(c(
        // time, newpop, size, oldpop
        c(_T[1], 1, _N[2,1], 0)
    ), c(4, 1)));

    // Admixture pulses, one row for each pulse.
    defineConstant("admixture_pulses", c());

    // Drawn mutations, one row for each mutation.
    defineConstant("drawn_mutations", c());

    // Fitness callbacks, one row for each callback.
    defineConstant("fitness_callbacks", c());

    // Mutations callbacks for h-s relationships, one variable for each callback.
    defineConstant("mut_types_with_callbacks", c());
    defineConstant("op_types", c("<", "<=", ">", ">="));
    // Allele frequency conditioning, one row for each.
    defineConstant("condition_on_allele_frequency", c());

    // One row for each sampling episode.
    defineConstant("sampling_episodes", array(c(
        // pop, n_inds, time
        c(0, 1, 0),
        c(1, 1, 0)
    ), c(3, 2)));

    // Note: these are floats because rounding causes error in population
    // growth: exp(round(x)*r*t) != round(exp(x*r*t))
    defineConstant("N", _N/Q);

    initializeTreeSeq(timeUnit="generations");
    initializeRecombinationRate(recombination_rates, recombination_ends);
}

function (void)err(string$ s) {
    stop("ERROR: " + s);
}

function (void)warn(string$ s) {
    catn("WARNING: " + s);
}

function (void)dbg(string$ s, [integer$ debug_level = 2]) {
    if (verbosity >= debug_level) {
        catn(community.tick + ": " + s);
    }
}



// Check that sizes aren't dangerously low or zero (e.g. due to scaling).
function (void)check_size(integer$ pop, integer$ size, integer$ t) {
    if (size == 0) {
        err("The population size of p"+pop+" ("+pop_names[pop]+") is zero " +
            "at tick "+t+".");
    } else if (size < 50) {
        warn("p"+pop+" ("+pop_names[pop]+") has only "+size+" individuals " +
             "alive at tick "+t+".");
    }
}

// Return the epoch index for generation g.
function (integer)epoch(integer G, integer $g) {
    for (i in 0:(num_epochs-1)) {
        if (g < G[i]) {
            return i;
        }
    }
    return num_epochs - 1;
}

// Return the population size of pop at generation g.
// This function returns values consistent with the continuous-time
// msprime model, not taking into account discretization effects.
function (integer)pop_size_at(integer G, integer$ pop, integer$ g) {
    e = epoch(G, g);
    N0 = N[e,pop];
    r = Q * growth_rates[e,pop];
    if (r == 0) {
        N_g = N0;
    } else {
        g_diff = g - G[e-1];
        N_g = N0*exp(r*g_diff);
    }
    return asInteger(round(N_g));
}

// Return the tick number for a given number of years ago.
function (integer)time_to_tick(numeric t) {
    return G0 - asInteger(t/generation_time/Q);
}

// Output tree sequence file and end the simulation.
function (void)end(void) {
    sim.treeSeqOutput(trees_file, metadata=metadata);
    sim.simulationFinished();
}


// Add `mut_type` mutation at `pos`, to a single individual in `pop`.
function (void)add_mut(object$ mut_type, object$ pop, integer$ pos) {
   targets = sample(pop.genomes, 1);
   targets.addNewDrawnMutation(mut_type, pos);
}

// Return the allele frequency of a drawn mutation in the specified population.
// Assumes there's only one mutation of the given type.
function (float$)af(object$ mut_type, object$ pop) {
    mut = sim.mutationsOfType(mut_type);
    if (length(mut) == 0) {
        return 0.0;
    }
    return sim.mutationFrequencies(pop, mut);
}

// Save the state of the simulation.
function (void)save(void) {
    if (sim.getValue("restore_function")) {
        // Don't save if we're in the restore() function.
        return;
    }
    n_saves = 1 + sim.getValue("n_saves");
    sim.setValue("n_saves", n_saves);
    dbg("save() "+n_saves);
    sim.treeSeqOutput(trees_file, metadata=metadata);
}

// Restore the simulation state.
function (void)restore(void) {
    g_restore = community.tick;
    n_restores = 1 + sim.getValue("n_restores");
    sim.setValue("n_restores", n_restores);
    n_saves = sim.getValue("n_saves");
    if (n_saves == 0) {
        err("restore() in tick "+g_restore+", but nothing is saved.");
    }
    sim.readFromPopulationFile(trees_file);
    dbg("restore() "+n_restores+" from tick "+g_restore+", returning "+
        "to state at save() "+n_saves);

    /*
     * The tick counter community.tick has now been reset to the
     * value it had when save() was called. There are two issues relating
     * to event scheduling which must now be dealt with.
     *
     * 1. There may be additional late events for the tick in which
     * restore() was called, and they are still scheduled to run.
     * So we deactivate all script blocks in the "late" cycle to avoid
     * unexpected problems. They will be automatically reactivated at the
     * start of the next tick.
     */
    sb = community.allScriptBlocks;
    sb[sb.type == "late"].active = 0;

    /*
     * 2. The late events below were run in the save() tick,
     * but after the save() call. We execute these again here, because
     * the next late events to run will be for community.tick + 1.
     * Note that the save() event is indistinguishable from the other
     * late events in this tick, so we set a flag `restore_function`
     * to signal the save() function not to save again.
     */
    g = community.tick;
    sim.setValue("restore_function", T);
    for (sb in community.allScriptBlocks) {
        if (sb.type == "late" & g >= sb.start & g <= sb.end) {
            self = sb;
            executeLambda(sb.source);
        }
    }
    sim.setValue("restore_function", F);
}



1 early() {
    // save/restore bookkeeping
    sim.setValue("n_restores", 0);
    sim.setValue("n_saves", 0);
    sim.setValue("restore_function", F);

    /*
     * Create initial populations and migration rates.
     */

    // Initial populations.
    for (i in 0:(num_populations-1)) {
        if (N[0,i] > 0) {
            check_size(i, asInteger(round(N[0,i])), community.tick);
            dbg("p = sim.addSubpop("+i+", "+asInteger(round(N[0,i]))+");");
            p = sim.addSubpop(i, asInteger(round(N[0,i])));
            dbg("p.name = '"+pop_names[i]+"';");
            p.name = pop_names[i];
        }
    }

    if (length(sim.subpopulations) == 0) {
        err("No populations with non-zero size in tick 1.");
    }

    // Initial migration rates.
    i = 0;
    for (j in 0:(num_populations-1)) {
        for (k in 0:(num_populations-1)) {
            if (j==k | N[i,j] < 1 | N[i,k] < 1) {
                next;
            }

            m = Q * migration_matrices[k,j,i];
            p = sim.subpopulations[j];
            dbg("p"+j+".setMigrationRates("+k+", "+m+");");
            p.setMigrationRates(k, m);
        }
    }

    // The end of the burn-in is the starting tick, and corresponds to
    // tick G_start. All remaining events are relative to this tick.
    N_max = asInteger(round(max(N[0,0:(num_populations-1)])));
    G_start = 1 + asInteger(round(burn_in * N_max));
    defineConstant("G0", asInteger(max(_T) / generation_time / Q + G_start));
    G = time_to_tick(_T);
    G_end = max(G);

    /*
     * Register events occurring at time T_start or more recently.
     */

    // Save/restore events. These should come before all other events.
    if (length(drawn_mutations) > 0) {
        n_checkpoints = 0;
        for (i in 0:(ncol(drawn_mutations)-1)) {
            save = drawn_mutations[4,i] == 1;
            if (save) {
                // Saving the state at more than one timepoint can can cause
                // incorrect conditioning in the rejection samples.
                if (n_checkpoints > 0) {
                    err("Attempt to save state at more than one checkpoint");
                }
                n_checkpoints = n_checkpoints + 1;

                // Unconditionally save the state before the mutation is drawn.
                g = time_to_tick(drawn_mutations[0,i]);
                community.registerLateEvent(NULL, "{save();}", g, g);
            }
        }
    }
    if (length(condition_on_allele_frequency) > 0) {
        for (i in 0:(ncol(condition_on_allele_frequency)-1)) {
            g_start = time_to_tick(condition_on_allele_frequency[0,i]);
            g_end = time_to_tick(condition_on_allele_frequency[1,i]);
            mut_type = asInteger(condition_on_allele_frequency[2,i]);
            pop_id = asInteger(condition_on_allele_frequency[3,i]);
            op = op_types[asInteger(drop(condition_on_allele_frequency[4,i]))];
            af = condition_on_allele_frequency[5,i];

            if (g_start > g_end) {
                err("Attempt to register AF conditioning callback with g_start="+
                    g_start+" > g_end="+g_end);
            }

            // Restore state if AF condition not met.
            community.registerLateEvent(NULL,
                "{if (!(af(m"+mut_type+", p"+pop_id+") "+op+" "+af+"))" +
                " restore();}",
                g_start, g_end);
        }
    }

    // Split events.
    if (length(subpopulation_splits) > 0 ) {
        for (i in 0:(ncol(subpopulation_splits)-1)) {
            g = time_to_tick(subpopulation_splits[0,i]);
            newpop = asInteger(drop(subpopulation_splits[1,i]));
            size = asInteger(round(subpopulation_splits[2,i] / Q));
            oldpop = asInteger(subpopulation_splits[3,i]);
            check_size(newpop, size, g);
            community.registerLateEvent(NULL,
                "{dbg(self.source); " +
                "p = sim.addSubpopSplit("+newpop+","+size+","+oldpop+"); " +
                "p.name = '"+pop_names[newpop]+"';}",
                g, g);
        }
    }

    // Population size changes.
    if (num_epochs > 1) {
        for (i in 1:(num_epochs-1)) {
            g = G[i-1];
            for (j in 0:(num_populations-1)) {
                // Change population size if this hasn't already been taken
                // care of by sim.addSubpop() or sim.addSubpopSplit().
                if ((N[i,j] != N[i-1,j] | growth_rates[i-1,j] != 0) & N[i-1,j] >= 1) {
                    check_size(j, asInteger(N[i,j]), g);
                    community.registerLateEvent(NULL,
                        "{dbg(self.source); " +
                        "p"+j+".setSubpopulationSize("+asInteger(round(N[i,j]))+");}",
                        g, g);
                }

                if (growth_rates[i,j] != 0) {
                    growth_phase_start = g+1;
                    growth_phase_end = G[i] - 1;
                    // this is the number of ticks that the pop will grow for
                    growth_phase_ticks = growth_phase_end - growth_phase_start;
                    // but this is the amount of continuous time the pop model grows for
                    growth_phase_length = growth_phase_ticks + 1;

                    if (growth_phase_start >= growth_phase_end) {
                        // Demographic models could have duplicate epoch times,
                        // which should be fixed.
                        warn("growth_phase_start="+growth_phase_start+
                             " >= growth_phase_end="+growth_phase_end);
                        next;
                    }

                    N_growth_phase_end = pop_size_at(G, j, growth_phase_end);
                    check_size(j, N_growth_phase_end, growth_phase_end);

                    N0 = N[i,j];
                    r = Q * growth_rates[i,j] * growth_phase_length / growth_phase_ticks;
                    community.registerLateEvent(NULL,
                        "{" +
                            "dbg(self.source); " +
                            "gx=community.tick-"+g+"; " +
                            "size=asInteger(round("+N0+"*exp("+r+"*gx))); " +
                            "p"+j+".setSubpopulationSize(size);" +
                        "}",
                        growth_phase_start, growth_phase_end);
                }
            }
        }

        // Migration rates.
        for (i in 1:(num_epochs-1)) {
            for (j in 0:(num_populations-1)) {
                for (k in 0:(num_populations-1)) {
                    if (j==k | N[i,j] < 1 | N[i,k] < 1) {
                        next;
                    }

                    m_last = Q * migration_matrices[k,j,i-1];
                    m = Q * migration_matrices[k,j,i];
                    if (m == m_last) {
                        // Do nothing if the migration rate hasn't changed.
                        next;
                    }
                    g = G[i-1];
                    community.registerLateEvent(NULL,
                        "{dbg(self.source); " +
                        "p"+j+".setMigrationRates("+k+", "+m+");}",
                        g, g);
                }
            }
        }
    }

    // Admixture pulses.
    if (length(admixture_pulses) > 0 ) {
        for (i in 0:(ncol(admixture_pulses)-1)) {
            g = time_to_tick(admixture_pulses[0,i]);
            dest = asInteger(admixture_pulses[1,i]);
            src = asInteger(admixture_pulses[2,i]);
            rate = admixture_pulses[3,i];
            community.registerLateEvent(NULL,
                "{dbg(self.source); " +
                "p"+dest+".setMigrationRates("+src+", "+rate+");}",
                g, g);
            community.registerLateEvent(NULL,
                "{dbg(self.source); " +
                "p"+dest+".setMigrationRates("+src+", 0);}",
                g+1, g+1);
        }
    }

    // Draw mutations.
    if (length(drawn_mutations) > 0) {
        for (i in 0:(ncol(drawn_mutations)-1)) {
            g = time_to_tick(drawn_mutations[0,i]);
            mut_type = asInteger(drawn_mutations[1,i]);
            pop_id = asInteger(drawn_mutations[2,i]);
            coordinate = asInteger(drawn_mutations[3,i]);
            community.registerLateEvent(NULL,
                "{dbg(self.source); " +
                "add_mut(m"+mut_type+", p"+pop_id+", "+coordinate+");}",
                g, g);
        }
    }

    // Setup fitness callbacks.
    if (length(fitness_callbacks) > 0) {
        for (i in 0:(ncol(fitness_callbacks)-1)) {
            g_start = time_to_tick(fitness_callbacks[0,i]);
            g_end = time_to_tick(fitness_callbacks[1,i]);
            mut_type = asInteger(fitness_callbacks[2,i]);
            pop_id = asInteger(fitness_callbacks[3,i]);
            selection_coeff = Q * fitness_callbacks[4,i];
            dominance_coeff = fitness_callbacks[5,i];

            if (g_start > g_end) {
                err("Attempt to register fitness callback with g_start="+
                    g_start+" > g_end="+g_end);
            }

            /* We explicitly format() here to prevent integral-valued floats
             * from getting converted to integers during string interpolation
             * (this triggers a type error when the fitness callback runs). */
            f_hom = format("%e", 1 + selection_coeff);
            f_het = format("%e", 1 + selection_coeff * dominance_coeff);

            /* "All populations" is encoded by a negative value of pop_id. */
            if (pop_id < 0) {
                community.registerLateEvent(NULL,
                    "{dbg('s="+selection_coeff+", h="+dominance_coeff+
                    " for m"+mut_type+" globally');}",
                    g_start, g_start);
                community.registerLateEvent(NULL,
                    "{dbg('s, h defaults for m"+mut_type+" globally');}",
                    g_end, g_end);
                sim.registerMutationEffectCallback(NULL,
                    "{if (homozygous) return "+f_hom+"; else return "+f_het+";}",
                    mut_type, NULL, g_start, g_end);
            } else {
                community.registerLateEvent(NULL,
                    "{dbg('s="+selection_coeff+", h="+dominance_coeff+
                    " for m"+mut_type+" in p"+pop_id+"');}",
                    g_start, g_start);
                community.registerLateEvent(NULL,
                    "{dbg('s, h defaults for m"+mut_type+" in p"+pop_id+"');}",
                    g_end, g_end);
                sim.registerMutationEffectCallback(NULL,
                    "{if (homozygous) return "+f_hom+"; else return "+f_het+";}",
                    mut_type, pop_id, g_start, g_end);
            }
        }
    }

    // Setup mutation callbacks.
    // For each stdpopsim mutation type with an h-s relationship
    // we have a sequence of assigned SLiM mutation types;
    // the first is the one that gets produced by mutation,
    // and the remainder are assigned by a mutation callback.
    for (i in seqAlong(mut_types_with_callbacks)) {
        mt = mut_types_with_callbacks[i];
        sim.registerMutationCallback(NULL,
            "{s = mut.selectionCoeff; "
            + "k = findInterval(s, dominance_coeff_breaks_" + mt + "); "
            + "mut.setMutationType(dominance_coeff_types_" + mt + "[k]); "
            + "return T;}",
            mt
        );
    }

    // Sample individuals.
    for (i in 0:(ncol(sampling_episodes)-1)) {
        pop = drop(asInteger(sampling_episodes[0,i]));
        n = sampling_episodes[1,i];
        g = time_to_tick(sampling_episodes[2,i]);

        // Check that there will be at least n individuals for sampling.
        N_g = pop_size_at(G, pop, g);
        if (n > N_g) {
            err("Request to sample "+n+" individuals from p"+pop+
                " ("+pop_names[pop]+") at tick "+g+", but only "+
                N_g+" individuals will be alive.");
        }

        if (n > 0) {
            community.registerLateEvent(NULL,
                "{dbg(self.source); " +
                "inds=p"+pop+".sampleIndividuals("+n+"); " +
                "sim.treeSeqRememberIndividuals(inds);}",
                g, g);
        }
    }

    community.registerLateEvent(NULL, "{dbg(self.source); end();}", G_end, G_end);

    if (G_start > community.tick) {
        dbg("Starting burn-in...");
    }

    if (dry_run) {
        sim.simulationFinished();
    }
}




///
/// Debugging output
///

// Print out selection coefficients for every new mutation:
// this is for development purposes, and the format of this output
// is subject to change or may even be removed!
// Header:
1 late() {
    if (verbosity >= 3) {
        dbg(paste(c("dbg_selection_coeff:",
                    "selectionCoeff",
                    "id",
                    "position"),
                  sep="	"));
    }
}

// Content:
1: late() {
    // Print out selection coefficients for every new mutation:
    // this is for development purposes, and the format of this output
    // is subject to change or may even be removed!
    if (verbosity >= 3) {
        new = (sim.mutations.originTick == community.tick);
        for (mut in sim.mutations[new]) {
            dbg(paste(c("dbg_selection_coeff:",
                        mut.selectionCoeff,
                        mut.id,
                        mut.position),
                      sep="	"));
        }
    }
}

// Save genomic element type information in tree sequence metadata
// This is for development purposes, and the format of this metadata
// is subject to change or may even be removed!
1 early() {
    if (verbosity >= 3) {
        // recombination map
        metadata.setValue(
            "recombination_rates",
            sim.chromosome.recombinationRates
        );
        metadata.setValue(
            "recombination_ends",
            sim.chromosome.recombinationEndPositions
        );
        // mutationTypes
        muts = Dictionary();
        for (mt in sim.mutationTypes) {
            mut_info = Dictionary(
                "distributionParams", mt.distributionParams,
                "distributionType", mt.distributionType,
                "dominanceCoeff", mt.dominanceCoeff
            );
            muts.setValue(asString(mt.id), mut_info);
        }
        metadata.setValue("mutationTypes", muts);
        // genomicElementTypes
        ge_starts = sim.chromosome.genomicElements.startPosition;
        ge_ends= sim.chromosome.genomicElements.endPosition;
        ge_types= sim.chromosome.genomicElements.genomicElementType.id;
        ges = Dictionary();
        for (gt in sim.genomicElementTypes) {
            gt_info = Dictionary(
                "mutationTypes", gt.mutationTypes.id,
                "mutationFractions", gt.mutationFractions,
                "intervalStarts", ge_starts[ge_types == gt.id],
                "intervalEnds", ge_ends[ge_types == gt.id]
            );
            ges.setValue(asString(gt.id), gt_info);
        }
        metadata.setValue("genomicElementTypes", ges);
        // mutation rates
        mr = Dictionary(
            "rates", sim.chromosome.mutationRates,
            "ends", sim.chromosome.mutationEndPositions
        );
        metadata.setValue("mutationRates", mr);
    }
}

// Save populations size information in tree sequence metadata
// This is for development purposes, and the format of this metadata
// is subject to change or may even be removed!
1 first() {
    if (verbosity >= 3) {
        metadata.setValue("population_sizes", Dictionary());
    }
}

1: late() {
    if (verbosity >= 3) {
        popsizes = metadata.getValue("population_sizes");
        for (pop in sim.subpopulations) {
            traj = popsizes.getValue(pop.name);
            if (isNULL(traj)) {
                traj = Dictionary();
                popsizes.setValue(pop.name, traj);
            }
            traj.setValue("t", c(traj.getValue("t"), community.tick));
            traj.setValue("N", c(traj.getValue("N"), pop.individualCount));
        }
    }
}


