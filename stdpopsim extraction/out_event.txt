// This snippet of SLiM code outputs information about the simulation to files for later use.
// It is used to post-process the .slim files generated by stdpopsim to extract the salient info.
// Do not try to execute this script it directly; the Bash script "extract_data.txt" runs it for you.

1 first() {
	//defineConstant("CHR_NAME", "chr22");	// defined at the command line

	setwd("../extracted/");
	
	// RECOMBINATION RATE MAP
	//
	// munge the data for initializeRecombinationRateFromFile()
	// by adding a start position of 0 and removing the last
	// position, and offsetting by 1 (ends to starts), then
	// make a DataFrame and write it out as a CSV
	recrates = sim.chromosome.recombinationRates;
	recends = sim.chromosome.recombinationEndPositions;
	
	// the positions by 1
	recstarts = c(0, recends+1)[seqAlong(recends)];
	
	df = DataFrame("starts", recstarts, "rates", recrates);
	csv = df.serialize("csv");
	csv = csv[seq(1, length(csv)-1)];	// remove the header line
	writeFile(CHR_NAME + "_recombination.txt", csv);
	
	// GENOMIC ELEMENT MAP
	ges = sim.chromosome.genomicElements;
	starts = ges.startPosition;
	ends = ges.endPosition;
	ids = ges.genomicElementType.id;
	
	df = DataFrame("id", ids, "starts", starts, "ends", ends);
	csv = df.serialize("csv");
	csv = csv[seq(1, length(csv)-1)];	// remove the header line
	writeFile(CHR_NAME + "_genomic_elements.txt", csv);
	
	// CHROMOSOME LENGTH
	length = sim.chromosome.length;
	
	writeFile(CHR_NAME + "_length.txt", asString(length));
	
	// we use stop() at the end to avoid executing any of the stdpopsim simulation
	stop("Data written.");
}
